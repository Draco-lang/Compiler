using System.Collections.Generic;

namespace Draco.Compiler.Internal.Syntax;

{{include 'Utils.sbncs'}}
{{include 'Tree.sbncs'}}

#nullable enable
{{for $node in Nodes}}
    /// <summary>
    /// {{$node.Documentation}}
    /// </summary>
    internal {{class_header($node)}}
    {
        {{for $field in $node.Fields}}
            {{field_prefix($field)}} { get; }
        {{end}}

        {{children($node)}}

        {{protected_public($node)}} {{$node.Name}}(
            {{wrap separated(', ', $node.Fields)}}
                {{$element.Type}} {{camel_case($element.Name)}}
            {{end}}
        )
        {
            {{for $element in $node.Fields}}
                this.{{$element.Name}} = {{camel_case($element.Name)}};
            {{end}}
        }

        {{if $node.IsAbstract}}
            public abstract
            {{if $node.Base}}
                override
            {{end}}
            Api.Syntax.{{$node.Name}} ToRedNode(SyntaxTree tree, Api.Syntax.{{Root.Name}}? parent);
        {{else}}
            public override Api.Syntax.{{$node.Name}} ToRedNode(SyntaxTree tree, Api.Syntax.{{Root.Name}}? parent) =>
                new Api.Syntax.{{$node.Name}}(tree, parent, this);
        {{end}}

        {{accept_functions($node)}}
    }
{{end}}

/// <summary>
/// Visitor base class for <see cref="{{Root.Name}}"/>.
/// </summary>
internal abstract partial class SyntaxVisitor
{
    {{visitor_functions(Nodes, 'void', null)}}
}

/// <summary>
/// Visitor base class for <see cref="{{Root.Name}}"/>.
/// </summary>
/// <typeparam name="TResult">
/// The return type of the visitor methods.
/// </typeparam>
internal abstract partial class SyntaxVisitor<TResult>
{
    {{visitor_functions(Nodes, 'TResult', 'default!')}}
}

/// <summary>
/// A base class for rewriting <see cref="{{Root.Name}}"/>.
/// </summary>
internal abstract partial class SyntaxRewriter : SyntaxVisitor<{{Root.Name}}>
{
    {{rewriter_functions(Nodes)}}
}
#nullable restore
