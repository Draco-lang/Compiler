using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using Draco.Compiler.Internal.Symbols.Metadata;
using Draco.Compiler.Internal.Symbols.Synthetized;

{{include 'Utils.sbncs'}}

{{func nameify(name)}}
    {{ret string.replace(name, '.', '')}}
{{end}}

#nullable enable

namespace Draco.Compiler.Internal.Symbols
{
internal sealed partial class WellKnownTypes
{
    {{for $assembly in Assemblies}}
        {{$prop_name = nameify($assembly.Name)}}
        {{$field_name = camel_case($prop_name)}}

        private static byte[] {{$prop_name}}_PublicKeyToken { get; } = new byte[]
        {
            {{for $b in $assembly.PublicKeyToken}}{{$b}}, {{end}}
        };

        public MetadataAssemblySymbol {{$prop_name}} => InterlockedUtils.InitializeNull(
            ref this.{{$field_name}},
            () => this.GetAssemblyWithNameAndToken("{{$assembly.Name}}", {{$prop_name}}_PublicKeyToken));
        private MetadataAssemblySymbol? {{$field_name}};
    {{end}}

    {{for $type in Types}}
        {{$prop_name = nameify($type.Name)}}
        {{$field_name = camel_case($prop_name)}}
        {{$path = string.split($type.Name, '.')}}

        public MetadataTypeSymbol {{$prop_name}} => InterlockedUtils.InitializeNull(
            ref this.{{$field_name}},
            () => this.GetTypeFromAssembly(
                {{nameify($type.Assembly.Name)}},
                ImmutableArray.Create({{wrap separated(', ', $path)}}
                    "{{$element}}"
                {{end}})));
        private MetadataTypeSymbol? {{$field_name}};
    {{end}}
}
}

namespace Draco.Compiler.Internal.Symbols.Synthetized
{
internal sealed partial class IntrinsicSymbols
{
    {{for $type in Types}}
        {{$metadata_type_name = nameify($type.Name)}}

        {{for $intrinsic in $type.Intrinsics}}
            {{$prop_name = capitalize($intrinsic.Name)}}
            {{$field_name = camel_case($prop_name)}}

            public TypeSymbol {{$prop_name}} => InterlockedUtils.InitializeNull(
                ref this.{{$field_name}},
                () => new MetadataBackedPrimitiveTypeSymbol(
                    name: "{{$intrinsic.Name}}",
                    isValueType: {{$intrinsic.IsValueType}},
                    metadataType: this.WellKnownTypes.{{$metadata_type_name}}));
            private TypeSymbol? {{$field_name}};
        {{end}}
    {{end}}
}
}
#nullable restore
