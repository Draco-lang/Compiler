using System.Collections.Generic;

namespace Draco.Compiler.Internal.Syntax;

{{include 'Utils.sbncs'}}
{{include 'Tree.sbncs'}}
{{include 'SyntaxTree.sbncs'}}

#nullable enable
{{for $node in Nodes}}
    /// <summary>
    /// {{$node.Documentation}}
    /// </summary>
    internal {{class_header($node)}}
    {
        {{for $field in $node.Fields}}
            {{field_prefix($field)}} { get; }
        {{end}}

        {{children($node)}}

        {{protected_public($node)}} {{$node.Name}}(
            {{wrap separated(', ', $node.Fields)}}
                {{if !$element.Abstract}}
                    {{$element.Type}} {{camel_case($element.Name)}}
                {{ end }}
            {{end}}
        )
        {
            {{for $field in $node.Fields}}
                {{if !$field.Abstract}}
                    {{# Check for allowed token kinds}}
                    {{if $field.IsToken}}
                        if (
                            {{if $field.IsNullable}}
                                {{camel_case($field.Name)}} is not null &&
                            {{end}}
                            {{camel_case($field.Name)}}.Kind is not
                            {{wrap separated(' and not ', $field.TokenKinds)}}
                                Api.Syntax.TokenKind.{{$element}}
                            {{end}}
                        )
                        {
                            throw new System.ArgumentOutOfRangeException(
                                nameof({{camel_case($field.Name)}}),
                                $"the token must be of kind {{array.join($field.TokenKinds, ' or ')}}"
                            );
                        }
                    {{end}}
                {{end}}
            {{end}}
            {{# Actual initialization}}
            {{for $field in $node.Fields}}
                {{if !$field.Abstract}}
                    this.{{$field.Name}} = {{camel_case($field.Name)}};
                {{end}}
            {{end}}
        }

        {{if $node.IsAbstract}}
            public abstract
            {{if $node.Base}}
                override
            {{end}}
            Api.Syntax.{{$node.Name}} ToRedNode(Api.Syntax.SyntaxTree tree, Api.Syntax.{{Root.Name}}? parent, int fullPosition);
        {{else}}
            public override Api.Syntax.{{$node.Name}} ToRedNode(Api.Syntax.SyntaxTree tree, Api.Syntax.{{Root.Name}}? parent, int fullPosition) =>
                new Api.Syntax.{{$node.Name}}(tree, parent, fullPosition, this);

            /// <summary>
            /// Updates this <see cref="{{$node.Name}}"/> with the new provided data.
            /// The node is only reinstantiated, if the passed in data is different.
            /// </summary>
            {{~for $field in $node.Fields~}}
                {{~if $field.Documentation~}}
                    /// <param name="{{camel_case($field.Name)}}">
                    /// {{$field.Documentation}}
                    /// </param>
                {{~end~}}
            {{~end~}}
            /// <returns>
            /// The constructed <see cref="{{$node.Name}}"/>, or this instance, if the passed in data is identical
            /// to the old one.
            /// </returns>
            public {{$node.Name}} Update(
                {{wrap separated(', ', $node.Fields)}}
                    {{$element.Type}} {{camel_case($element.Name)}}
                {{end}}
            )
            {
                if (
                    {{wrap separated(' && ', $node.Fields)}}
                        Equals(this.{{$element.Name}}, {{camel_case($element.Name)}})
                    {{end}}
                ) return this;
                else return new {{$node.Name}}(
                    {{wrap separated(', ', $node.Fields)}}
                        {{camel_case($element.Name)}}
                    {{end}}
                );
            }

            /// <summary>
            /// Updates this <see cref="{{$node.Name}}"/> with the new provided data.
            /// The node is only reinstantiated, if the passed in data is different.
            /// </summary>
            /// <param name="children">The child nodes of this node.</param>
            /// <returns>
            /// The constructed <see cref="{{$node.Name}}"/>, or this instance, if the passed in data is identical
            /// to the old one.
            /// </returns>
            public {{$node.Name}} Update(IEnumerable<SyntaxNode?> children)
            {
                var enumerator = children.GetEnumerator();
                {{for $field in $node.Fields}}
                    if (!enumerator.MoveNext())
                    {
                        throw new System.ArgumentOutOfRangeException(
                            nameof(children),
                            "the sequence must contain the exact amount of children");
                    }
                    var {{camel_case($field.Name)}} = ({{$field.Type}})enumerator.Current!;
                {{end}}
                return this.Update(
                    {{wrap separated(', ', $node.Fields)}}
                        {{camel_case($element.Name)}}
                    {{end}}
                );
            }
        {{end}}

        {{accept_functions($node)}}
    }
{{end}}

/// <summary>
/// Visitor base class for <see cref="{{Root.Name}}"/>.
/// </summary>
internal abstract partial class SyntaxVisitor
{
    {{visitor_functions(Nodes, 'void', null)}}
}

/// <summary>
/// Visitor base class for <see cref="{{Root.Name}}"/>.
/// </summary>
/// <typeparam name="TResult">
/// The return type of the visitor methods.
/// </typeparam>
internal abstract partial class SyntaxVisitor<TResult>
{
    {{visitor_functions(Nodes, 'TResult', 'default!')}}
}

/// <summary>
/// A base class for rewriting <see cref="{{Root.Name}}"/>.
/// </summary>
internal abstract partial class SyntaxRewriter : SyntaxVisitor<{{Root.Name}}>
{
    {{for $node in Nodes}}
        {{if !$node.IsAbstract}}
            public override {{Root.Name}} Visit{{remove_suffix($node.Name, 'Syntax')}}({{$node.Name}} node)
            {
                {{for $element in $node.Fields}}
                    var {{camel_case($element.Name)}} =
                        ({{$element.Type}})node.{{$element.Name}}{{nullable($element)}}.Accept(this);
                {{end}}
                return node.Update(
                    {{wrap separated(', ', $node.Fields)}}
                        {{camel_case($element.Name)}}
                    {{end}}
                );
            }
        {{end}}
    {{end}}
}
#nullable restore
