namespace Draco.Compiler.Api.Syntax;

{{include 'Utils.sbncs'}}
{{include 'Tree.sbncs'}}

{{for $node in Nodes}}
    /// <summary>
    /// {{$node.Documentation}}
    /// </summary>
    public {{class_header($node)}}
    {
        {{if $node.IsAbstract}}
            public {{Root.Name}} Parent { get; }
        {{end}}

        {{for $field in $node.Fields}}
            {{$backingField = camel_case($field.Name)}}
            {{field_prefix($field)}} => this.{{$backingField}} ??= this.green.{{$field.Name}}.ToRedNode(this.tree, this);
            private Internal.Syntax.{{$field.Type}} {{$backingField}};
        {{end}}

        {{children($node)}}

        {{if $node.IsAbstract}}
            internal {{$node.Name}}({{Root.Name}}? parent)
            {
                this.Parent = parent;
            }
        {{else}}
            private readonly Internal.Syntax.SyntaxTree tree;
            private readonly Internal.Syntax.{{$node.Name}} green;

            internal {{$node.Name}}(
                Internal.Syntax.SyntaxTree tree,
                Internal.Syntax.{{$node.Name}} green,
                {{Root.Name}}? parent) : base(parent)
            {
                this.tree = tree;
                this.green = green;
            }
        {{end}}

        {{if $node.IsAbstract}}
            public abstract TResult Accept<TResult>(SyntaxVisitor<TResult> visitor);
        {{else}}
            public override TResult Accept<TResult>(SyntaxVisitor<TResult> visitor) =>
                visitor.Visit{{$node.Name}}(this);
        {{end}}
    }

    {{if !$node.IsAbstract}}
        public static class SyntaxFactory
        {
            /// <summary>
            /// Constructs a new <cref see="{{$node.Name}}"/>.
            /// </summary>
            {{~for $field in $node.Fields~}}
                {{~if $field.Documentation~}}
                    /// <param name="{{camel_case($field.Name)}}">
                    /// {{$field.Documentation}}
                    /// </param>
                {{~end~}}
            {{~end~}}
            /// <returns>
            /// The constructed <cref see="{{$node.Name}}"/>.
            /// </returns>
            public static {{$node.Name}} {{$node.Name}}(
                {{wrap separated(', ', $node.Fields)}}
                    {{$element.Type}} {{camel_case($element.Name)}}
                {{end}}
            ) => new Internal.Syntax.{{$node.Name}}(
                {{wrap separated(', ', $node.Fields)}}
                    {{camel_case($element.Name)}}
                {{end}}
            ).ToRedNode(null!, null);
        }
    {{end}}
{{end}}
