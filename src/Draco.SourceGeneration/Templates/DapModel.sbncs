using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using Draco.Dap.Serialization;

namespace Draco.Dap.Model;

{{include 'Utils.sbncs'}}

{{func summary(doc)}}
    {{if !doc}}{{ret}}{{end}}
    /// <summary>
    {{~for $line in split_lines(doc)-}}
        /// {{$line}}
    {{~end-}}
    /// </summary>
{{end}}

{{func base(class)}}
    {{if !class}}{{ret}}{{end}}
    : {{class.Name}}
{{end}}

{{func type(t)}}
    {{case t.Discriminator}}
    {{when 'Builtin'}} {{t.FullName}}
    {{when 'Declaration'}}
        {{t.Declaration.Name}}
    {{when 'Nullable'}} {{type(t.Type)}}?
    {{when 'Array'}} IList<{{type(t.ElementType)}}>
    {{when 'DiscriminatedUnion'}}
        OneOf<{{wrap separated(', ', t.Alternatives)}}{{type($element)}}{{end}}>
    {{end}}
{{end}}

{{func property(decl)}}
    {{summary(decl.Documentation)}}
    [JsonPropertyName({{string.literal(decl.SerializedName)}})]
    [JsonIgnore(Condition = JsonIgnoreCondition.{{if decl.OmitIfNull}}WhenWritingDefault{{else}}Never{{end}})]
    {{$is_required = !decl.OmitIfNull && !decl.Value}}
    {{if $is_required}}
        [JsonRequired]
    {{end}}
    public
    {{if $is_required}}required{{end}}
    {{type(decl.Type)}} {{decl.Name}}
    {{if decl.Value}}
        =>
        {{case decl.ValueDiscriminator}}
        {{when 'String'}}
            {{string.literal(decl.Value)}}
        {{end}}
        ;
    {{else}}
        { get; set; }
    {{end}}
{{end}}

{{func class(cl)}}
    public class {{cl.Name}} {{base(cl.Base)}}
    {
        {{for $nested in cl.NestedDeclarations}}
            {{declaration($nested)}}
        {{end}}

        {{for $prop in cl.Properties}}
            {{property($prop)}}
        {{end}}
    }
{{end}}

{{func enum(decl)}}
    {{if decl.IsStringEnum}}
        [JsonConverter(typeof(EnumValueConverter))]
    {{end}}
    public enum {{decl.Name}}
    {
        {{for $mem in decl.Members}}
            {{enum_member($mem)}},
        {{end}}
    }
{{end}}

{{func enum_member(decl)}}
    {{summary(decl.Documentation)}}
    {{case decl.ValueDiscriminator}}
    {{when 'Int'}}
        {{decl.Name}} = {{decl.Value}}
    {{when 'String'}}
        [EnumMember(Value = {{string.literal(decl.Value)}})]
        {{decl.Name}}
    {{end}}
{{end}}

{{func declaration(decl)}}
    {{summary(decl.Documentation)}}
    {{case decl.Discriminator}}
    {{when 'Class'}} {{class(decl)}}
    {{when 'Enum'}} {{enum(decl)}}
    {{end}}
{{end}}

#nullable enable
#pragma warning disable CS9042
{{for $decl in Declarations}}
    {{declaration($decl)}}
{{end}}
#pragma warning restore CS9042
