namespace Draco.Compiler.Internal.Syntax;

{{func summary(doc)}}
    {{if doc}}
        /// <summary>
        /// {{doc}}
        /// </summary>
    {{end}}
{{end}}

{{func base(node)}}
    {{if node.Base}}
        : {{node.Base.Name}}
    {{end}}
{{end}}

{{func abstract_sealed(node)}}
    {{if node.IsAbstract}}
        abstract
    {{else}}
        sealed
    {{end}}
{{end}}

{{func protected_public(node)}}
    {{if node.IsAbstract}}
        protected
    {{else}}
        public
    {{end}}
{{end}}

{{func prop(field)}}
    {{summary(field.Documentation)}}
    public
    {{if field.Override}}
        override
    {{end}}
    {{field.Type}} {{field.Name}} { get; }
{{end}}

{{func comma_separated}}
    {{$first = true}}
    {{for $element in $0}}
        {{if !$first}}
            ,
        {{end}}
        {{$first = false}}
        {{$$}}
    {{end}}
{{end}}

{{func params(fields)}}
    {{wrap comma_separated fields}}
        {{$element.Type}} {{to_camel_case($element.Name)}}
    {{end}}
{{end}}

{{func args(fields)}}
    {{wrap comma_separated fields}}
        {{to_camel_case($element.Name)}}
    {{end}}
{{end}}

{{for $node in Nodes}}
    {{summary($node.Documentation)}}
    internal {{abstract_sealed($node)}} partial class {{$node.Name}} {{base($node)}}
    {
        {{for $field in $node.Fields}}
            {{prop($field)}}
        {{end}}

        public override IEnumerable<{{Root.Name}}> Children
        {
            get
            {
                {{for $field in $node.Fields}}
                    yield return this.{{$field.Name}};
                {{end}}
            }
        }

        {{protected_public($node)}} {{$node.Name}}({{params($node.Fields)}})
        {
            {{for $element in $node.Fields}}
                this.{{$element.Name}} = {{to_camel_case($element.Name)}};
            {{end}}
        }
    }
{{end}}
