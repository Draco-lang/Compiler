namespace Draco.Compiler.Api.Syntax;

{{include 'Utils.sbncs'}}
{{include 'Tree.sbncs'}}

{{for $node in Nodes}}
    /// <summary>
    /// {{$node.Documentation}}
    /// </summary>
    public {{class_header($node)}}
    {
        {{for $field in $node.Fields}}
            {{$backingField = camel_case($field.Name)}}
            {{field_prefix($field)}} => this.{{$backingField}} ??= this.green.{{$field.Name}}{{nullable($field)}}.ToRedNode(this.tree, this);
            private {{$field.NonNullableType}}? {{$backingField}};
        {{end}}

        {{children($node)}}

        private readonly Internal.Syntax.{{$node.Name}} green;

        internal {{$node.Name}}(
            Internal.Syntax.SyntaxTree tree,
            {{Root.Name}}? parent,
            Internal.Syntax.{{$node.Name}} green) : base(tree, parent)
        {
            this.green = green;
        }

        {{accept_functions($node)}}
    }

    {{if !$node.IsAbstract}}
        public static partial class SyntaxFactory
        {
            /// <summary>
            /// Constructs a new <cref see="{{$node.Name}}"/>.
            /// </summary>
            {{~for $field in $node.Fields~}}
                {{~if $field.Documentation~}}
                    /// <param name="{{camel_case($field.Name)}}">
                    /// {{$field.Documentation}}
                    /// </param>
                {{~end~}}
            {{~end~}}
            /// <returns>
            /// The constructed <cref see="{{$node.Name}}"/>.
            /// </returns>
            public static {{$node.Name}} {{$node.Name}}(
                {{wrap separated(', ', $node.Fields)}}
                    {{$element.Type}} {{camel_case($element.Name)}}
                {{end}}
            ) => new Internal.Syntax.{{$node.Name}}(
                {{wrap separated(', ', $node.Fields)}}
                    {{camel_case($element.Name)}}
                {{end}}
            ).ToRedNode(null!, null);
        }
    {{end}}
{{end}}

/// <summary>
/// Visitor base class for <cref see="{{Root.Name}}"/>.
/// </summary>
public abstract partial class SyntaxVisitor
{
    {{visitor_functions(Nodes, 'void', null)}}
}

/// <summary>
/// Visitor base class for <cref see="{{Root.Name}}"/>.
/// </summary>
/// <typeparam name="TResult">
/// The return type of the visitor methods.
/// </typeparam>
public abstract partial class SyntaxVisitor<TResult>
{
    {{visitor_functions(Nodes, 'TResult', 'default!')}}
}
