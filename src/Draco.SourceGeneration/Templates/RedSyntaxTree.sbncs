using System.Collections.Generic;

namespace Draco.Compiler.Api.Syntax;

{{include 'Utils.sbncs'}}
{{include 'Tree.sbncs'}}
{{include 'SyntaxTree.sbncs'}}

{{func to_internal_type(t)}}
    Internal.Syntax.{{string.replace(t, '<', '<Internal.Syntax.')}}
{{end}}

#nullable enable
{{for $node in Nodes}}
    /// <summary>
    /// {{$node.Documentation}}
    /// </summary>
    public {{class_header($node)}}
    {
        {{$fieldFullPosition = 'this.FullPosition'}}
        {{for $field in $node.Fields}}
            {{$backingField = camel_case($field.Name)}}
            {{field_prefix($field)}} =>
                this.{{$backingField}} ??= ({{$field.Type}})this.Green.{{$field.Name}}{{nullable($field)}}.ToRedNode(this.Tree, this, {{$fieldFullPosition}});
            private {{$field.NonNullableType}}? {{$backingField}};
            {{if $field.IsNullable}}
                {{$fieldFullPosition += '+ (this.Green.' + $field.Name + '?.FullWidth ?? 0)'}}
            {{else}}
                {{$fieldFullPosition += '+ this.Green.' + $field.Name + '.FullWidth'}}
            {{end}}
        {{end}}

        {{if $node.IsAbstract}}
            internal abstract
            {{if $node.Base}}
                override
            {{end}}
            Internal.Syntax.{{$node.Name}} Green { get; }
        {{else}}
            internal override Internal.Syntax.{{$node.Name}} Green { get; }
        {{end}}

        {{children($node)}}

        {{if $node.IsAbstract}}
            {{if $node.Base}}
                internal {{$node.Name}}(
                    SyntaxTree tree,
                    {{Root.Name}}? parent,
                    int fullPosition)
                    : base(tree, parent, fullPosition)
                {
                }
            {{end}}
        {{else}}
            internal {{$node.Name}}(
                SyntaxTree tree,
                {{Root.Name}}? parent,
                int fullPosition,
                Internal.Syntax.{{$node.Name}} green)
                : base(tree, parent, fullPosition)
            {
                this.Green = green;
            }
        {{end}}

        {{accept_functions($node)}}
    }

    {{if !$node.IsAbstract}}
        public static partial class SyntaxFactory
        {
            /// <summary>
            /// Constructs a new <see cref="{{$node.Name}}"/>.
            /// </summary>
            {{~for $field in $node.Fields~}}
                {{~if $field.Documentation~}}
                    /// <param name="{{camel_case($field.Name)}}">
                    /// {{$field.Documentation}}
                    /// </param>
                {{~end~}}
            {{~end~}}
            /// <returns>
            /// The constructed <see cref="{{$node.Name}}"/>.
            /// </returns>
            public static {{$node.Name}} {{remove_suffix($node.Name, 'Syntax')}}(
                {{wrap separated(', ', $node.Fields)}}
                    {{$element.Type}} {{camel_case($element.Name)}}
                {{end}}
            ) => new Internal.Syntax.{{$node.Name}}(
                {{wrap separated(', ', $node.Fields)}}
                    ({{to_internal_type($element.Type)}}){{camel_case($element.Name)}}{{nullable($element)}}.Green
                {{end}}
            ).ToRedNode(null!, null, 0);
        }
    {{end}}
{{end}}

/// <summary>
/// Visitor base class for <see cref="{{Root.Name}}"/>.
/// </summary>
public abstract partial class SyntaxVisitor
{
    {{visitor_functions(Nodes, 'void', null)}}
}

/// <summary>
/// Visitor base class for <see cref="{{Root.Name}}"/>.
/// </summary>
/// <typeparam name="TResult">
/// The return type of the visitor methods.
/// </typeparam>
public abstract partial class SyntaxVisitor<TResult>
{
    {{visitor_functions(Nodes, 'TResult', 'default!')}}
}
#nullable restore
